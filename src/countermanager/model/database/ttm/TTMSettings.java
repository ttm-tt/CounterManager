/* Copyright (C) 2020 Christoph Theis */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package countermanager.model.database.ttm;

import countermanager.model.database.IDatabaseSettings;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author chtheis
 */
public class TTMSettings extends javax.swing.JPanel implements IDatabaseSettings {

    /**
     * Creates new form TTM
     */
    public TTMSettings(TTM database) {
        this.database = database;
        initComponents();
        
        countermanager.prefs.Properties prefs = database.getProperties();
        databaseTextField.setText(prefs.getString(TTM.DATABASE_PREF, ""));
        serverTextField.setText(prefs.getString(TTM.SERVER_PREF, "(local)"));
        authtypeCheckBox.setSelected(prefs.getBoolean(TTM.WINDOWS_AUTH_PREF, false));
        userTextField.setText(prefs.getString(TTM.USER_PREF, ""));
        pwdTextField.setText(prefs.getString(TTM.PWD_PREF, ""));
        
        authtypeCheckBoxActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLabel = new javax.swing.JLabel();
        serverTextField = new javax.swing.JTextField();
        databaseLabel = new javax.swing.JLabel();
        databaseTextField = new javax.swing.JTextField();
        authtypeCheckBox = new javax.swing.JCheckBox();
        userLabel = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        pwdLabel = new javax.swing.JLabel();
        pwdTextField = new javax.swing.JPasswordField();
        testConnectionButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("countermanager/gui/resources/CounterManager"); // NOI18N
        serverLabel.setText(bundle.getString("serverLabel")); // NOI18N

        serverTextField.setText("(local)");

        databaseLabel.setText(bundle.getString("databaseLabel")); // NOI18N

        authtypeCheckBox.setSelected(true);
        authtypeCheckBox.setText(bundle.getString("authtypeCheckBox")); // NOI18N
        authtypeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        authtypeCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        authtypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authtypeCheckBoxActionPerformed(evt);
            }
        });

        userLabel.setText(bundle.getString("userLabel")); // NOI18N

        pwdLabel.setText(bundle.getString("pwdLabel")); // NOI18N

        testConnectionButton.setText(bundle.getString("testConnectionButton")); // NOI18N
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(testConnectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serverLabel)
                            .addComponent(databaseLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pwdLabel)
                            .addComponent(userLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userTextField)
                            .addComponent(pwdTextField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(authtypeCheckBox)
                                .addGap(0, 75, Short.MAX_VALUE))
                            .addComponent(databaseTextField)
                            .addComponent(serverTextField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabel)
                    .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseLabel)
                    .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(authtypeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdLabel)
                    .addComponent(pwdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(testConnectionButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void authtypeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authtypeCheckBoxActionPerformed
        // Enable / Disable user and pwd according to authentication type
        if ( authtypeCheckBox.isSelected() ) {
            userTextField.setEnabled(false);
            pwdTextField.setEnabled(false);
        } else {
            userTextField.setEnabled(true);
            pwdTextField.setEnabled(true);
        }
    }//GEN-LAST:event_authtypeCheckBoxActionPerformed

    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionButtonActionPerformed
        String server = serverTextField.getText();
        String dbName = databaseTextField.getText();
        boolean windowsAuth = authtypeCheckBox.isSelected();
        String user = userTextField.getText();
        String pwd = new String(pwdTextField.getPassword());
        
        StringBuilder sb = new StringBuilder();
        sb.append("jdbc:sqlserver://");
        if (server.equalsIgnoreCase("(local)"))
            sb.append("localhost");
        else
            sb.append(server);
        sb.append(";");
        
        String[] db = dbName.split("\\\\");
        sb.append("databaseName=").append(db[0]).append(";");
        if (db.length > 1)
            sb.append("instanceName=").append(db[1]).append(";");
        
        if (windowsAuth)
            sb.append("integratedSecurity=true;trustServerCertificate=true;encrypt=true;");
        else
            sb.append("user=").append(user).append(";").append("password=").append(pwd).append(";");
        
        String connectionString = sb.toString();

        if (database.testConnection(connectionString)) {
            JOptionPane.showMessageDialog(
                this, "Database connection test successfull", "Connection Successful", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(
                this, "Database connection test failed", "Connection Failure", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_testConnectionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox authtypeCheckBox;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JTextField databaseTextField;
    private javax.swing.JLabel pwdLabel;
    private javax.swing.JPasswordField pwdTextField;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField serverTextField;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables

    private TTM database;

    @Override
    public void store() {
        try {
            countermanager.prefs.Properties prefs = database.getProperties();
            prefs.clear();
            
            prefs.putString(TTM.DATABASE_PREF, databaseTextField.getText());
            prefs.putString(TTM.SERVER_PREF, serverTextField.getText());
            prefs.putBoolean(TTM.WINDOWS_AUTH_PREF, authtypeCheckBox.isSelected());
            prefs.putString(TTM.USER_PREF, userTextField.getText());
            prefs.putString(TTM.PWD_PREF, pwdTextField.getText());

            database.putProperties(prefs);
        } catch (Exception ex) {
            Logger.getLogger(TTMSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
